# schema.graphql

enum ProjectStatus {
  NotStarted
  InProgress
  OnHold
  Completed
  Cancelled
  PendingReview
}

enum DevelopmentStageType {
  RequirementAnalysis
  Design
  Implementation
  Testing
  Deployment
  Maintenance
  ProjectManagement
}

enum PermissionLevel {
  Owner
  Admin
  Editor
  Viewer
}

enum NotificationType {
  Email
  Slack
  Webhook
}

enum DocumentType {
  Requirements
  DesignSpecifications
  ImplementationGuide
  TestCases
  DeploymentPlan
  MaintenanceLog
  ProjectPlan
  MeetingNotes
}

enum DocumentSubType {
  BusinessRequirements
  SystemRequirements
  UserStories
  HighLevelDesign
  DetailedDesign
  DatabaseDesign
  InterfaceDesign
  TechnicalSpecifications
  DevelopmentGuidelines
  SourceCode
  APIDocumentation
  TestPlan
  TestCase
  TestReport
  DeploymentStrategy
  ReleaseNotes
  InstallationGuide
  MaintenanceManual
  ChangeLog
  ProjectCharter
  ProjectSchedule
  RiskAssessment
  MeetingAgenda
  MeetingMinutes
  StakeholderCommunication
}

type Statement {
  id: ID!
  speaker: String
  content: String
}

type Project {
  id: ID!
  name: String
  stages: [DevelopmentStage]
  status: ProjectStatus
}

type DevelopmentStage {
  id: ID!
  type: DevelopmentStageType
  name: String
  # documents: [Document]
  # discussions: [Discussion]
  tasks: [Task]
  status: ProjectStatus
}

type Task {
  id: ID!
  name: String
  documents: [Document]
  discussions: [Discussion]
  status: ProjectStatus
}

type Document {
  id: ID!
  type: DocumentType
  subType: DocumentSubType
  title: String
  content: String
  status: ProjectStatus
}

type Discussion {
  id: ID!
  topic: String
  participants: [String]
  statements: [Statement]
}

type Query {
  # プロジェクトの読み取りクエリ
  project(id: ID!): Project
  projects: [Project]
  developmentStage(id: ID!): DevelopmentStage
  developmentStages(projectId: ID!): [DevelopmentStage]
  task(id: ID!): Task
  tasks(developmentStageId: ID!): [Task]
  document(id: ID!): Document
  documents(taskId: ID!): [Document]
  discussion(id: ID!): Discussion
  discussions(taskId: ID!): [Discussion]
}

type Mutation {
  # プロジェクトに関するミューテーション
  createProject(name: String!, status: ProjectStatus!): Project
  updateProject(id: ID!, name: String, status: ProjectStatus): Project
  deleteProject(id: ID!): ID

  # 開発ステージに関するミューテーション
  addDevelopmentStage(
    projectId: ID!
    type: DevelopmentStageType!
    name: String!
    status: ProjectStatus!
  ): DevelopmentStage
  updateDevelopmentStage(
    id: ID!
    type: DevelopmentStageType
    name: String
    status: ProjectStatus
  ): DevelopmentStage
  deleteDevelopmentStage(id: ID!): ID

  # タスクに関するミューテーション
  addTask(developmentStageId: ID!, name: String!, status: ProjectStatus!): Task
  updateTask(id: ID!, name: String, status: ProjectStatus): Task
  deleteTask(id: ID!): ID

  # ドキュメントに関するミューテーション
  addDocument(
    taskId: ID!
    type: DocumentType!
    subType: DocumentSubType!
    title: String!
    content: String!
    status: ProjectStatus!
  ): Document
  updateDocument(
    id: ID!
    type: DocumentType
    subType: DocumentSubType
    title: String
    content: String
    status: ProjectStatus
  ): Document
  deleteDocument(id: ID!): ID

  # ディスカッションに関するミューテーション
  addDiscussion(
    taskId: ID!
    topic: String!
    participants: [String]!
  ): Discussion
  updateDiscussion(id: ID!, topic: String, participants: [String]): Discussion
  deleteDiscussion(id: ID!): ID

  # ステートメントに関するミューテーション
  addStatement(discussionId: ID!, speaker: String!, content: String!): Statement
  updateStatement(id: ID!, speaker: String, content: String): Statement
  deleteStatement(id: ID!): ID
}
