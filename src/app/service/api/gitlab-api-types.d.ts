/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/groups/{id}/badges/{badge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a badge of a group.
         * @description This feature was introduced in GitLab 10.6.
         */
        get: operations["getApiV4GroupsIdBadgesBadgeId"];
        /**
         * Updates a badge of a group.
         * @description This feature was introduced in GitLab 10.6.
         */
        put: operations["putApiV4GroupsIdBadgesBadgeId"];
        post?: never;
        /**
         * Removes a badge from the group.
         * @description This feature was introduced in GitLab 10.6.
         */
        delete: operations["deleteApiV4GroupsIdBadgesBadgeId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/badges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of group badges viewable by the authenticated user.
         * @description This feature was introduced in GitLab 10.6.
         */
        get: operations["getApiV4GroupsIdBadges"];
        put?: never;
        /**
         * Adds a badge to a group.
         * @description This feature was introduced in GitLab 10.6.
         */
        post: operations["postApiV4GroupsIdBadges"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/badges/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview a badge from a group.
         * @description This feature was introduced in GitLab 10.6.
         */
        get: operations["getApiV4GroupsIdBadgesRender"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/access_requests/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Denies an access request for the given user.
         * @description This feature was introduced in GitLab 8.11.
         */
        delete: operations["deleteApiV4GroupsIdAccessRequestsUserId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/access_requests/{user_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Approves an access request for the given user.
         * @description This feature was introduced in GitLab 8.11.
         */
        put: operations["putApiV4GroupsIdAccessRequestsUserIdApprove"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/access_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of access requests for a group.
         * @description This feature was introduced in GitLab 8.11.
         */
        get: operations["getApiV4GroupsIdAccessRequests"];
        put?: never;
        /**
         * Requests access for the authenticated user to a group.
         * @description This feature was introduced in GitLab 8.11.
         */
        post: operations["postApiV4GroupsIdAccessRequests"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/repository/merged_branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete all merged branches */
        delete: operations["deleteApiV4ProjectsIdRepositoryMergedBranches"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/repository/branches/{branch}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a single repository branch */
        get: operations["getApiV4ProjectsIdRepositoryBranchesBranch"];
        put?: never;
        post?: never;
        /** @description Delete a branch */
        delete: operations["deleteApiV4ProjectsIdRepositoryBranchesBranch"];
        options?: never;
        /** @description Check if a branch exists */
        head: operations["headApiV4ProjectsIdRepositoryBranchesBranch"];
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/repository/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a project repository branches */
        get: operations["getApiV4ProjectsIdRepositoryBranches"];
        put?: never;
        /** @description Create branch */
        post: operations["postApiV4ProjectsIdRepositoryBranches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/repository/branches/{branch}/unprotect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Unprotect a single branch */
        put: operations["putApiV4ProjectsIdRepositoryBranchesBranchUnprotect"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/repository/branches/{branch}/protect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Protect a single branch */
        put: operations["putApiV4ProjectsIdRepositoryBranchesBranchProtect"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/badges/{badge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a badge of a project.
         * @description This feature was introduced in GitLab 10.6.
         */
        get: operations["getApiV4ProjectsIdBadgesBadgeId"];
        /**
         * Updates a badge of a project.
         * @description This feature was introduced in GitLab 10.6.
         */
        put: operations["putApiV4ProjectsIdBadgesBadgeId"];
        post?: never;
        /**
         * Removes a badge from the project.
         * @description This feature was introduced in GitLab 10.6.
         */
        delete: operations["deleteApiV4ProjectsIdBadgesBadgeId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/badges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of project badges viewable by the authenticated user.
         * @description This feature was introduced in GitLab 10.6.
         */
        get: operations["getApiV4ProjectsIdBadges"];
        put?: never;
        /**
         * Adds a badge to a project.
         * @description This feature was introduced in GitLab 10.6.
         */
        post: operations["postApiV4ProjectsIdBadges"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/badges/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview a badge from a project.
         * @description This feature was introduced in GitLab 10.6.
         */
        get: operations["getApiV4ProjectsIdBadgesRender"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/access_requests/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Denies an access request for the given user.
         * @description This feature was introduced in GitLab 8.11.
         */
        delete: operations["deleteApiV4ProjectsIdAccessRequestsUserId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/access_requests/{user_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Approves an access request for the given user.
         * @description This feature was introduced in GitLab 8.11.
         */
        put: operations["putApiV4ProjectsIdAccessRequestsUserIdApprove"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/access_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of access requests for a project.
         * @description This feature was introduced in GitLab 8.11.
         */
        get: operations["getApiV4ProjectsIdAccessRequests"];
        put?: never;
        /**
         * Requests access for the authenticated user to a project.
         * @description This feature was introduced in GitLab 8.11.
         */
        post: operations["postApiV4ProjectsIdAccessRequests"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a metric image for an alert */
        put: operations["putApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId"];
        post?: never;
        /** @description Remove a metric image for an alert */
        delete: operations["deleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/alert_management_alerts/{alert_iid}/metric_images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Metric Images for alert */
        get: operations["getApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages"];
        put?: never;
        /** @description Upload a metric image for an alert */
        post: operations["postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Workhorse authorize metric image file upload */
        post: operations["postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/batched_background_migrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a batched background migration */
        get: operations["getApiV4AdminBatchedBackgroundMigrationsId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/batched_background_migrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the list of batched background migrations */
        get: operations["getApiV4AdminBatchedBackgroundMigrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/batched_background_migrations/{id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Resume a batched background migration */
        put: operations["putApiV4AdminBatchedBackgroundMigrationsIdResume"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/batched_background_migrations/{id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Pause a batched background migration */
        put: operations["putApiV4AdminBatchedBackgroundMigrationsIdPause"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/ci/variables/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the details of a specific instance-level variable */
        get: operations["getApiV4AdminCiVariablesKey"];
        /** @description Update an instance-level variable */
        put: operations["putApiV4AdminCiVariablesKey"];
        post?: never;
        /** @description Delete an existing instance-level variable */
        delete: operations["deleteApiV4AdminCiVariablesKey"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/ci/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all instance-level variables */
        get: operations["getApiV4AdminCiVariables"];
        put?: never;
        /** @description Create a new instance-level variable */
        post: operations["postApiV4AdminCiVariables"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/databases/{database_name}/dictionary/tables/{table_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve dictionary details */
        get: operations["getApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/clusters/{cluster_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single instance cluster
         * @description This feature was introduced in GitLab 13.2. Returns a single instance cluster.
         */
        get: operations["getApiV4AdminClustersClusterId"];
        /**
         * Edit instance cluster
         * @description This feature was introduced in GitLab 13.2. Updates an existing instance cluster.
         */
        put: operations["putApiV4AdminClustersClusterId"];
        post?: never;
        /**
         * Delete instance cluster
         * @description This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.
         */
        delete: operations["deleteApiV4AdminClustersClusterId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/clusters/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add existing instance cluster
         * @description This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.
         */
        post: operations["postApiV4AdminClustersAdd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/clusters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List instance clusters
         * @description This feature was introduced in GitLab 13.2. Returns a list of instance clusters.
         */
        get: operations["getApiV4AdminClusters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/migrations/{timestamp}/mark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Mark the migration as successfully executed */
        post: operations["postApiV4AdminMigrationsTimestampMark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete an application
         * @description Delete a specific application
         */
        delete: operations["deleteApiV4ApplicationsId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get applications
         * @description List all registered applications
         */
        get: operations["getApiV4Applications"];
        put?: never;
        /**
         * Create a new application
         * @description This feature was introduced in GitLab 10.5
         */
        post: operations["postApiV4Applications"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return avatar url for a user */
        get: operations["getApiV4Avatar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/broadcast_messages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific broadcast message
         * @description This feature was introduced in GitLab 8.12.
         */
        get: operations["getApiV4BroadcastMessagesId"];
        /**
         * Update a broadcast message
         * @description This feature was introduced in GitLab 8.12.
         */
        put: operations["putApiV4BroadcastMessagesId"];
        post?: never;
        /**
         * Delete a broadcast message
         * @description This feature was introduced in GitLab 8.12.
         */
        delete: operations["deleteApiV4BroadcastMessagesId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/broadcast_messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all broadcast messages
         * @description This feature was introduced in GitLab 8.12.
         */
        get: operations["getApiV4BroadcastMessages"];
        put?: never;
        /**
         * Create a broadcast message
         * @description This feature was introduced in GitLab 8.12.
         */
        post: operations["postApiV4BroadcastMessages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk_imports/{import_id}/entities/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get GitLab Migration entity details
         * @description This feature was introduced in GitLab 14.1.
         */
        get: operations["getApiV4BulkImportsImportIdEntitiesEntityId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk_imports/{import_id}/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List GitLab Migration entities
         * @description This feature was introduced in GitLab 14.1.
         */
        get: operations["getApiV4BulkImportsImportIdEntities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk_imports/{import_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get GitLab Migration details
         * @description This feature was introduced in GitLab 14.1.
         */
        get: operations["getApiV4BulkImportsImportId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk_imports/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all GitLab Migrations' entities
         * @description This feature was introduced in GitLab 14.1.
         */
        get: operations["getApiV4BulkImportsEntities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulk_imports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all GitLab Migrations
         * @description This feature was introduced in GitLab 14.1.
         */
        get: operations["getApiV4BulkImports"];
        put?: never;
        /**
         * Start a new GitLab Migration
         * @description This feature was introduced in GitLab 14.2.
         */
        post: operations["postApiV4BulkImports"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/application/appearance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the current appearance */
        get: operations["getApiV4ApplicationAppearance"];
        /** @description Modify appearance */
        put: operations["putApiV4ApplicationAppearance"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/application/plan_limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current plan limits
         * @description List the current limits of a plan on the GitLab instance.
         */
        get: operations["getApiV4ApplicationPlanLimits"];
        /**
         * Change plan limits
         * @description Modify the limits of a plan on the GitLab instance.
         */
        put: operations["putApiV4ApplicationPlanLimits"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve metadata information for this GitLab instance
         * @description This feature was introduced in GitLab 15.2.
         */
        get: operations["getApiV4Metadata"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves version information for the GitLab instance
         * @description This feature was introduced in GitLab 8.13 and deprecated in 15.5. We recommend you instead use the Metadata API.
         */
        get: operations["getApiV4Version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List jobs for a project */
        get: operations["listProjectJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single job by ID */
        get: operations["getSingleJob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/jobs/{job_id}/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run a manual job */
        post: operations["triggerManualJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description API_Entities_Badge model */
        API_Entities_Badge: {
            name?: string;
            link_url?: string;
            image_url?: string;
            rendered_link_url?: string;
            rendered_image_url?: string;
            id?: string;
            kind?: string;
        };
        /** @description API_Entities_BasicBadgeDetails model */
        API_Entities_BasicBadgeDetails: {
            name?: string;
            link_url?: string;
            image_url?: string;
            rendered_link_url?: string;
            rendered_image_url?: string;
        };
        /** @description API_Entities_AccessRequester model */
        API_Entities_AccessRequester: {
            /**
             * Format: int32
             * @example 1
             */
            id?: number;
            /** @example admin */
            username?: string;
            /** @example Administrator */
            name?: string;
            /** @example active */
            state?: string;
            /** @example https://gravatar.com/avatar/1 */
            avatar_url?: string;
            /** @example /user/avatar/28/The-Big-Lebowski-400-400.png */
            avatar_path?: string;
            custom_attributes?: components["schemas"]["API_Entities_CustomAttribute"][];
            /** @example https://gitlab.example.com/root */
            web_url?: string;
            email?: string;
            requested_at?: string;
        };
        API_Entities_CustomAttribute: {
            /** @example foo */
            key?: string;
            /** @example bar */
            value?: string;
        };
        /** @description API_Entities_Branch model */
        API_Entities_Branch: {
            /** @example master */
            name?: string;
            commit?: components["schemas"]["API_Entities_Commit"];
            /** @example true */
            merged?: boolean;
            /** @example true */
            protected?: boolean;
            /** @example true */
            developers_can_push?: boolean;
            /** @example true */
            developers_can_merge?: boolean;
            /** @example true */
            can_push?: boolean;
            /** @example true */
            default?: boolean;
            /** @example https://gitlab.example.com/Commit921/the-dude/-/tree/master */
            web_url?: string;
        };
        API_Entities_Commit: {
            /** @example 2695effb5807a22ff3d138d593fd856244e155e7 */
            id?: string;
            /** @example 2695effb */
            short_id?: string;
            /**
             * Format: date-time
             * @example 2017-07-26T11:08:53+02:00
             */
            created_at?: string;
            parent_ids?: string[];
            /** @example Initial commit */
            title?: string;
            /** @example Initial commit */
            message?: string;
            /** @example John Smith */
            author_name?: string;
            /** @example john@example.com */
            author_email?: string;
            /**
             * Format: date-time
             * @example 2012-05-28T04:42:42-07:00
             */
            authored_date?: string;
            /** @example Jack Smith */
            committer_name?: string;
            /** @example jack@example.com */
            committer_email?: string;
            /**
             * Format: date-time
             * @example 2012-05-28T04:42:42-07:00
             */
            committed_date?: string;
            /** @example { "Merged-By": "Jane Doe janedoe@gitlab.com" } */
            trailers?: Record<string, never>;
            /** @example https://gitlab.example.com/janedoe/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746 */
            web_url?: string;
        };
        /** @description API_Entities_MetricImage model */
        API_Entities_MetricImage: {
            /**
             * Format: int32
             * @example 23
             */
            id?: number;
            /**
             * Format: date-time
             * @example 2020-11-13T00:06:18.084Z
             */
            created_at?: string;
            /** @example file.png */
            filename?: string;
            /** @example /uploads/-/system/alert_metric_image/file/23/file.png */
            file_path?: string;
            /** @example https://example.com/metric */
            url?: string;
            /** @example An example metric */
            url_text?: string;
        };
        /** @description API_Entities_BatchedBackgroundMigration model */
        API_Entities_BatchedBackgroundMigration: {
            /** @example 1234 */
            id?: string;
            /** @example CopyColumnUsingBackgroundMigrationJob */
            job_class_name?: string;
            /** @example events */
            table_name?: string;
            /** @example active */
            status?: string;
            /**
             * Format: float
             * @example 50
             */
            progress?: number;
            /**
             * Format: date-time
             * @example 2022-11-28T16:26:39+02:00
             */
            created_at?: string;
        };
        /** @description API_Entities_Ci_Variable model */
        API_Entities_Ci_Variable: {
            /** @example env_var */
            variable_type?: string;
            /** @example TEST_VARIABLE_1 */
            key?: string;
            /** @example TEST_1 */
            value?: string;
            protected?: boolean;
            masked?: boolean;
            raw?: boolean;
            /** @example * */
            environment_scope?: string;
        };
        /** @description API_Entities_Dictionary_Table model */
        API_Entities_Dictionary_Table: {
            /** @example users */
            table_name?: string;
            feature_categories?: string[];
        };
        /** @description API_Entities_Cluster model */
        API_Entities_Cluster: {
            id?: string;
            name?: string;
            created_at?: string;
            domain?: string;
            enabled?: string;
            managed?: string;
            provider_type?: string;
            platform_type?: string;
            environment_scope?: string;
            cluster_type?: string;
            namespace_per_environment?: string;
            user?: components["schemas"]["API_Entities_UserBasic"];
            platform_kubernetes?: components["schemas"]["API_Entities_Platform_Kubernetes"];
            provider_gcp?: components["schemas"]["API_Entities_Provider_Gcp"];
            management_project?: components["schemas"]["API_Entities_ProjectIdentity"];
        };
        API_Entities_UserBasic: {
            /**
             * Format: int32
             * @example 1
             */
            id?: number;
            /** @example admin */
            username?: string;
            /** @example Administrator */
            name?: string;
            /** @example active */
            state?: string;
            /** @example https://gravatar.com/avatar/1 */
            avatar_url?: string;
            /** @example /user/avatar/28/The-Big-Lebowski-400-400.png */
            avatar_path?: string;
            custom_attributes?: components["schemas"]["API_Entities_CustomAttribute"][];
            /** @example https://gitlab.example.com/root */
            web_url?: string;
            email?: string;
        };
        API_Entities_Platform_Kubernetes: {
            api_url?: string;
            namespace?: string;
            authorization_type?: string;
            ca_cert?: string;
        };
        API_Entities_Provider_Gcp: {
            cluster_id?: string;
            status_name?: string;
            gcp_project_id?: string;
            zone?: string;
            machine_type?: string;
            num_nodes?: string;
            endpoint?: string;
        };
        API_Entities_ProjectIdentity: {
            /**
             * Format: int32
             * @example 1
             */
            id?: number;
            /** @example desc */
            description?: string;
            /** @example project1 */
            name?: string;
            /** @example John Doe / project1 */
            name_with_namespace?: string;
            /** @example project1 */
            path?: string;
            /** @example namespace1/project1 */
            path_with_namespace?: string;
            /**
             * Format: date-time
             * @example 2020-05-07T04:27:17.016Z
             */
            created_at?: string;
        };
        /** @description API_Entities_Application model */
        API_Entities_Application: {
            id?: string;
            /** @example 5832fc6e14300a0d962240a8144466eef4ee93ef0d218477e55f11cf12fc3737 */
            application_id?: string;
            /** @example MyApplication */
            application_name?: string;
            /** @example https://redirect.uri */
            callback_url?: string;
            /** @example true */
            confidential?: boolean;
        };
        /** @description API_Entities_ApplicationWithSecret model */
        API_Entities_ApplicationWithSecret: {
            id?: string;
            /** @example 5832fc6e14300a0d962240a8144466eef4ee93ef0d218477e55f11cf12fc3737 */
            application_id?: string;
            /** @example MyApplication */
            application_name?: string;
            /** @example https://redirect.uri */
            callback_url?: string;
            /** @example true */
            confidential?: boolean;
            /** @example ee1dd64b6adc89cf7e2c23099301ccc2c61b441064e9324d963c46902a85ec34 */
            secret?: string;
        };
        /** @description API_Entities_Avatar model */
        API_Entities_Avatar: {
            avatar_url?: string;
        };
        /** @description API_Entities_BroadcastMessage model */
        API_Entities_BroadcastMessage: {
            id?: string;
            message?: string;
            starts_at?: string;
            ends_at?: string;
            color?: string;
            font?: string;
            target_access_levels?: string;
            target_path?: string;
            broadcast_type?: string;
            dismissable?: string;
            active?: string;
        };
        /** @description API_Entities_BulkImports model */
        API_Entities_BulkImports: {
            /**
             * Format: int32
             * @example 1
             */
            id?: number;
            /**
             * Format: int32
             * @example 1
             */
            bulk_import_id?: number;
            /**
             * @example created
             * @enum {string}
             */
            status?: "created" | "started" | "finished" | "timeout" | "failed";
            /** @enum {string} */
            entity_type?: "group" | "project";
            /** @example source_group */
            source_full_path?: string;
            /** @example some_group/source_project */
            destination_full_path?: string;
            /** @example destination_slug */
            destination_name?: string;
            /** @example destination_slug */
            destination_slug?: string;
            /** @example destination_path */
            destination_namespace?: string;
            /**
             * Format: int32
             * @example 1
             */
            parent_id?: number;
            /**
             * Format: int32
             * @example 1
             */
            namespace_id?: number;
            /**
             * Format: int32
             * @example 1
             */
            project_id?: number;
            /**
             * Format: date-time
             * @example 2012-05-28T04:42:42-07:00
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2012-05-28T04:42:42-07:00
             */
            updated_at?: string;
            failures?: components["schemas"]["API_Entities_BulkImports_EntityFailure"][];
            /** @example true */
            migrate_projects?: boolean;
        };
        API_Entities_BulkImports_EntityFailure: {
            /** @example group */
            relation?: string;
            /** @example extractor */
            step?: string;
            /** @example error message */
            exception_message?: string;
            /** @example Exception */
            exception_class?: string;
            /** @example dfcf583058ed4508e4c7c617bd7f0edd */
            correlation_id_value?: string;
            /**
             * Format: date-time
             * @example 2012-05-28T04:42:42-07:00
             */
            created_at?: string;
            /** @example BulkImports::Groups::Pipelines::GroupPipeline */
            pipeline_class?: string;
            /** @example extractor */
            pipeline_step?: string;
        };
        /** @description API_Entities_BulkImport model */
        API_Entities_BulkImport: {
            /**
             * Format: int32
             * @example 1
             */
            id?: number;
            /**
             * @example finished
             * @enum {string}
             */
            status?: "created" | "started" | "finished" | "timeout" | "failed";
            /** @example gitlab */
            source_type?: string;
            /**
             * Format: date-time
             * @example 2012-05-28T04:42:42-07:00
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2012-05-28T04:42:42-07:00
             */
            updated_at?: string;
        };
        /** @description API_Entities_Appearance model */
        API_Entities_Appearance: {
            title?: string;
            description?: string;
            pwa_name?: string;
            pwa_short_name?: string;
            pwa_description?: string;
            logo?: string;
            pwa_icon?: string;
            header_logo?: string;
            favicon?: string;
            new_project_guidelines?: string;
            profile_image_guidelines?: string;
            header_message?: string;
            footer_message?: string;
            message_background_color?: string;
            message_font_color?: string;
            email_header_and_footer_enabled?: string;
        };
        /** @description API_Entities_PlanLimit model */
        API_Entities_PlanLimit: {
            /**
             * Format: int32
             * @example 0
             */
            ci_pipeline_size?: number;
            /**
             * Format: int32
             * @example 0
             */
            ci_active_jobs?: number;
            /**
             * Format: int32
             * @example 2
             */
            ci_project_subscriptions?: number;
            /**
             * Format: int32
             * @example 10
             */
            ci_pipeline_schedules?: number;
            /**
             * Format: int32
             * @example 50
             */
            ci_needs_size_limit?: number;
            /**
             * Format: int32
             * @example 1000
             */
            ci_registered_group_runners?: number;
            /**
             * Format: int32
             * @example 1000
             */
            ci_registered_project_runners?: number;
            /**
             * Format: int32
             * @example 3221225472
             */
            conan_max_file_size?: number;
            /**
             * Format: int32
             * @example 15000
             */
            enforcement_limit?: number;
            /**
             * Format: int32
             * @example 5368709120
             */
            generic_packages_max_file_size?: number;
            /**
             * Format: int32
             * @example 5242880
             */
            helm_max_file_size?: number;
            /** @example {"enforcement_limit"=>[{"timestamp"=>1686909124, "user_id"=>1, "username"=>"x", "value"=>5}],
             *                        "notification_limit"=>[{"timestamp"=>1686909124, "user_id"=>2, "username"=>"y", "value"=>7}]} */
            limits_history?: Record<string, never>;
            /**
             * Format: int32
             * @example 3221225472
             */
            maven_max_file_size?: number;
            /**
             * Format: int32
             * @example 15000
             */
            notification_limit?: number;
            /**
             * Format: int32
             * @example 524288000
             */
            npm_max_file_size?: number;
            /**
             * Format: int32
             * @example 524288000
             */
            nuget_max_file_size?: number;
            /**
             * Format: int32
             * @example 1000
             */
            pipeline_hierarchy_size?: number;
            /**
             * Format: int32
             * @example 3221225472
             */
            pypi_max_file_size?: number;
            /**
             * Format: int32
             * @example 1073741824
             */
            terraform_module_max_file_size?: number;
            /**
             * Format: int32
             * @example 15000
             */
            storage_size_limit?: number;
        };
        /** @description API_Entities_Metadata model */
        API_Entities_Metadata: {
            /** @example 15.2-pre */
            version?: string;
            /** @example c401a659d0c */
            revision?: string;
            kas?: {
                enabled?: boolean;
                /** @example grpc://gitlab.example.com:8150 */
                externalUrl?: string;
                /** @example 15.0.0 */
                version?: string;
            };
            enterprise?: boolean;
        };
        /** @description API_Entities_Job model */
        API_Entities_Job: {
            /** @description The ID of the job */
            id?: number;
            /** @description The name of the job */
            name?: string;
            /** @description The current status of the job */
            status?: string;
            /** @description The stage of the job in the CI/CD pipeline */
            stage?: string;
            /**
             * Format: date-time
             * @description The creation time of the job
             * @example 2016-01-11T10:13:33.506Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description The start time of the job
             * @example 2016-01-11T10:13:33.506Z
             */
            started_at?: string;
            /**
             * Format: date-time
             * @description The finish time of the job
             * @example 2016-01-11T10:13:33.506Z
             */
            finished_at?: string;
            commit?: components["schemas"]["API_Entities_Commit"];
            /** @description Indicates if the job is archived */
            archived?: boolean;
            /** @description Indicates if the job is allowed to fail */
            allow_failure?: boolean;
            /**
             * Format: date-time
             * @description The time when the job was erased, if applicable
             * @example 2016-01-11T10:13:33.506Z
             */
            erased_at?: string;
            /** @description The duration of the job in seconds */
            duration?: number;
            /** @description The duration the job was queued before execution, in seconds */
            queued_duration?: number;
            /** @description The reference for the job */
            ref?: string;
            /** @description The artifacts produced by the job */
            artifacts?: unknown[];
            /** @description Indicates if the job is tagged */
            tag?: boolean;
            /** @description The URL for accessing the job in the web interface */
            web_url?: string;
            project?: {
                /** @description Indicates if the CI/CD job token scope setting is enabled for the project */
                ci_job_token_scope_enabled?: boolean;
            };
            /** @description The user that started the job */
            user?: components["schemas"]["API_Entities_UserBasic"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getApiV4GroupsIdBadgesBadgeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user. */
                id: string;
                /** @description The badge ID */
                badge_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a badge of a group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"];
                };
            };
        };
    };
    putApiV4GroupsIdBadgesBadgeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user. */
                id: string;
                badge_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description URL of the badge link */
                    link_url?: string;
                    /** @description URL of the badge image */
                    image_url?: string;
                    /** @description Name for the badge */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Updates a badge of a group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"];
                };
            };
        };
    };
    deleteApiV4GroupsIdBadgesBadgeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user. */
                id: string;
                /** @description The badge ID */
                badge_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Removes a badge from the group. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4GroupsIdBadges: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Name for the badge */
                name?: string;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a list of group badges viewable by the authenticated user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"][];
                };
            };
        };
    };
    postApiV4GroupsIdBadges: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description URL of the badge link */
                    link_url: string;
                    /** @description URL of the badge image */
                    image_url: string;
                    /** @description Name for the badge */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Adds a badge to a group. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"];
                };
            };
        };
    };
    getApiV4GroupsIdBadgesRender: {
        parameters: {
            query: {
                /** @description URL of the badge link */
                link_url: string;
                /** @description URL of the badge image */
                image_url: string;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Preview a badge from a group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BasicBadgeDetails"];
                };
            };
        };
    };
    deleteApiV4GroupsIdAccessRequestsUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user */
                id: string;
                /** @description The user ID of the access requester */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Denies an access request for the given user. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4GroupsIdAccessRequestsUserIdApprove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user */
                id: string;
                /** @description The user ID of the access requester */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int32
                     * @description A valid access level (defaults: `30`, the Developer role)
                     * @default 30
                     */
                    access_level?: number;
                };
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_AccessRequester"];
                    successfull_response: unknown;
                };
            };
        };
    };
    getApiV4GroupsIdAccessRequests: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a list of access requests for a group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_AccessRequester"];
                };
            };
        };
    };
    postApiV4GroupsIdAccessRequests: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the group owned by the authenticated user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_AccessRequester"];
                    successfull_response: unknown;
                };
            };
        };
    };
    deleteApiV4ProjectsIdRepositoryMergedBranches: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 202 Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 Project Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4ProjectsIdRepositoryBranchesBranch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                branch: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a single repository branch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Branch"];
                };
            };
            /** @description Branch Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV4ProjectsIdRepositoryBranchesBranch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The name of the branch */
                branch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a branch */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Branch Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    headApiV4ProjectsIdRepositoryBranchesBranch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The name of the branch */
                branch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4ProjectsIdRepositoryBranches: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Return list of branches matching the search criteria */
                search?: string;
                /** @description Return list of branches matching the regex */
                regex?: string;
                /** @description Return list of branches sorted by the given field */
                sort?: "name_asc" | "updated_asc" | "updated_desc";
                /** @description Name of branch to start the pagination from */
                page_token?: string;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a project repository branches */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Branch"][];
                };
            };
            /** @description 404 Project Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV4ProjectsIdRepositoryBranches: {
        parameters: {
            query: {
                /** @description The name of the branch */
                branch: string;
                /** @description Create branch from commit sha or existing branch */
                ref: string;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Create branch */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Branch"];
                };
            };
            /** @description Failed to create branch */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4ProjectsIdRepositoryBranchesBranchUnprotect: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The name of the branch */
                branch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unprotect a single branch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Branch"];
                };
            };
            /** @description 404 Project Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4ProjectsIdRepositoryBranchesBranchProtect: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The name of the branch */
                branch: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Flag if developers can push to that branch */
                    developers_can_push?: boolean;
                    /** @description Flag if developers can merge to that branch */
                    developers_can_merge?: boolean;
                };
            };
        };
        responses: {
            /** @description Protect a single branch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Branch"];
                };
            };
            /** @description 404 Branch Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4ProjectsIdBadgesBadgeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user. */
                id: string;
                /** @description The badge ID */
                badge_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a badge of a project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"];
                };
            };
        };
    };
    putApiV4ProjectsIdBadgesBadgeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user. */
                id: string;
                badge_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description URL of the badge link */
                    link_url?: string;
                    /** @description URL of the badge image */
                    image_url?: string;
                    /** @description Name for the badge */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Updates a badge of a project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"];
                };
            };
        };
    };
    deleteApiV4ProjectsIdBadgesBadgeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user. */
                id: string;
                /** @description The badge ID */
                badge_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Removes a badge from the project. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4ProjectsIdBadges: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Name for the badge */
                name?: string;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a list of project badges viewable by the authenticated user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"][];
                };
            };
        };
    };
    postApiV4ProjectsIdBadges: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description URL of the badge link */
                    link_url: string;
                    /** @description URL of the badge image */
                    image_url: string;
                    /** @description Name for the badge */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Adds a badge to a project. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Badge"];
                };
            };
        };
    };
    getApiV4ProjectsIdBadgesRender: {
        parameters: {
            query: {
                /** @description URL of the badge link */
                link_url: string;
                /** @description URL of the badge image */
                image_url: string;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Preview a badge from a project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BasicBadgeDetails"];
                };
            };
        };
    };
    deleteApiV4ProjectsIdAccessRequestsUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user */
                id: string;
                /** @description The user ID of the access requester */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Denies an access request for the given user. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4ProjectsIdAccessRequestsUserIdApprove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user */
                id: string;
                /** @description The user ID of the access requester */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int32
                     * @description A valid access level (defaults: `30`, the Developer role)
                     * @default 30
                     */
                    access_level?: number;
                };
            };
        };
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_AccessRequester"];
                    successfull_response: unknown;
                };
            };
        };
    };
    getApiV4ProjectsIdAccessRequests: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a list of access requests for a project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_AccessRequester"];
                };
            };
        };
    };
    postApiV4ProjectsIdAccessRequests: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project owned by the authenticated user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_AccessRequester"];
                    successfull_response: unknown;
                };
            };
        };
    };
    putApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The IID of the Alert */
                alert_iid: number;
                /** @description The ID of metric image */
                metric_image_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description The url to view more metric info */
                    url?: string;
                    /** @description A description of the image or URL */
                    url_text?: string;
                };
            };
        };
        responses: {
            /** @description Update a metric image for an alert */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_MetricImage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The IID of the Alert */
                alert_iid: number;
                /** @description The ID of metric image */
                metric_image_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove a metric image for an alert */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_MetricImage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The IID of the Alert */
                alert_iid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Metric Images for alert */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_MetricImage"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The IID of the Alert */
                alert_iid: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The image file to be uploaded
                     */
                    file: string;
                    /** @description The url to view more metric info */
                    url?: string;
                    /** @description A description of the image or URL */
                    url_text?: string;
                };
            };
        };
        responses: {
            /** @description Upload a metric image for an alert */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_MetricImage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or URL-encoded path of the project */
                id: string;
                /** @description The IID of the Alert */
                alert_iid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workhorse authorize metric image file upload */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4AdminBatchedBackgroundMigrationsId: {
        parameters: {
            query?: {
                /** @description The name of the database */
                database?: "main" | "ci" | "embedding" | "main_clusterwide" | "geo";
            };
            header?: never;
            path: {
                /** @description The batched background migration id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a batched background migration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BatchedBackgroundMigration"];
                };
            };
            /** @description 401 Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4AdminBatchedBackgroundMigrations: {
        parameters: {
            query?: {
                /** @description The name of the database, the default `main` */
                database?: "main" | "ci" | "embedding" | "main_clusterwide" | "geo";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get the list of batched background migrations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BatchedBackgroundMigration"][];
                };
            };
            /** @description 401 Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4AdminBatchedBackgroundMigrationsIdResume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The batched background migration id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the database
                     * @default main
                     * @enum {string}
                     */
                    database?: "main" | "ci" | "embedding" | "main_clusterwide" | "geo";
                };
            };
        };
        responses: {
            /** @description Resume a batched background migration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BatchedBackgroundMigration"];
                };
            };
            /** @description 401 Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You can resume only `paused` batched background migrations. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4AdminBatchedBackgroundMigrationsIdPause: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The batched background migration id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the database
                     * @default main
                     * @enum {string}
                     */
                    database?: "main" | "ci" | "embedding" | "main_clusterwide" | "geo";
                };
            };
        };
        responses: {
            /** @description Pause a batched background migration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BatchedBackgroundMigration"];
                };
            };
            /** @description 401 Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You can pause only `active` batched background migrations. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4AdminCiVariablesKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of a variable */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get the details of a specific instance-level variable */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Ci_Variable"];
                };
            };
            /** @description Instance Variable Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4AdminCiVariablesKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of a variable */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The value of a variable */
                    value?: string;
                    /** @description Whether the variable is protected */
                    protected?: boolean;
                    /** @description Whether the variable is masked */
                    masked?: boolean;
                    /** @description Whether the variable will be expanded */
                    raw?: boolean;
                    /**
                     * @description The type of a variable. Available types are: env_var (default) and file
                     * @enum {string}
                     */
                    variable_type?: "env_var" | "file";
                };
            };
        };
        responses: {
            /** @description Update an instance-level variable */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Ci_Variable"];
                };
            };
            /** @description Instance Variable Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV4AdminCiVariablesKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The key of a variable */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an existing instance-level variable */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Ci_Variable"];
                };
            };
            /** @description Instance Variable Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4AdminCiVariables: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all instance-level variables */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Ci_Variable"];
                };
            };
        };
    };
    postApiV4AdminCiVariables: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The key of the variable. Max 255 characters */
                    key: string;
                    /** @description The value of a variable */
                    value: string;
                    /** @description Whether the variable is protected */
                    protected?: boolean;
                    /** @description Whether the variable is masked */
                    masked?: boolean;
                    /** @description Whether the variable will be expanded */
                    raw?: boolean;
                    /**
                     * @description The type of a variable. Available types are: env_var (default) and file
                     * @enum {string}
                     */
                    variable_type?: "env_var" | "file";
                };
            };
        };
        responses: {
            /** @description Create a new instance-level variable */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Ci_Variable"];
                };
            };
            /** @description 400 Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The database name */
                database_name: "main" | "ci";
                /** @description The table name */
                table_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve dictionary details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Dictionary_Table"];
                };
            };
            /** @description 401 Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4AdminClustersClusterId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The cluster ID */
                cluster_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a single instance cluster */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Cluster"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4AdminClustersClusterId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The cluster ID */
                cluster_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Cluster name */
                    name?: string;
                    /** @description Enable or disable Gitlab's connection to your Kubernetes cluster */
                    enabled?: boolean;
                    /** @description The associated environment to the cluster */
                    environment_scope?: string;
                    /**
                     * @description Deploy each environment to a separate Kubernetes namespace
                     * @default true
                     */
                    namespace_per_environment?: boolean;
                    /** @description Cluster base domain */
                    domain?: string;
                    /**
                     * Format: int32
                     * @description The ID of the management project
                     */
                    management_project_id?: number;
                    /** @description Determines if GitLab will manage namespaces and service accounts for this cluster */
                    managed?: boolean;
                    /** @description URL to access the Kubernetes API */
                    "platform_kubernetes_attributes[api_url]"?: string;
                    /** @description Token to authenticate against Kubernetes */
                    "platform_kubernetes_attributes[token]"?: string;
                    /** @description TLS certificate (needed if API is using a self-signed TLS certificate) */
                    "platform_kubernetes_attributes[ca_cert]"?: string;
                    /** @description Unique namespace related to Project */
                    "platform_kubernetes_attributes[namespace]"?: string;
                };
            };
        };
        responses: {
            /** @description Edit instance cluster */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Cluster"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV4AdminClustersClusterId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The cluster ID */
                cluster_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete instance cluster */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Cluster"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV4AdminClustersAdd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Cluster name */
                    name: string;
                    /**
                     * @description Determines if cluster is active or not, defaults to true
                     * @default true
                     */
                    enabled?: boolean;
                    /**
                     * @description The associated environment to the cluster
                     * @default *
                     */
                    environment_scope?: string;
                    /**
                     * @description Deploy each environment to a separate Kubernetes namespace
                     * @default true
                     */
                    namespace_per_environment?: boolean;
                    /** @description Cluster base domain */
                    domain?: string;
                    /**
                     * Format: int32
                     * @description The ID of the management project
                     */
                    management_project_id?: number;
                    /**
                     * @description Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true
                     * @default true
                     */
                    managed?: boolean;
                    /** @description URL to access the Kubernetes API */
                    "platform_kubernetes_attributes[api_url]": string;
                    /** @description Token to authenticate against Kubernetes */
                    "platform_kubernetes_attributes[token]": string;
                    /** @description TLS certificate (needed if API is using a self-signed TLS certificate) */
                    "platform_kubernetes_attributes[ca_cert]"?: string;
                    /** @description Unique namespace related to Project */
                    "platform_kubernetes_attributes[namespace]"?: string;
                    /**
                     * @description Cluster authorization type, defaults to RBAC
                     * @default rbac
                     * @enum {string}
                     */
                    "platform_kubernetes_attributes[authorization_type]"?: "unknown_authorization" | "rbac" | "abac";
                };
            };
        };
        responses: {
            /** @description Add existing instance cluster */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Cluster"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4AdminClusters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List instance clusters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Cluster"][];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV4AdminMigrationsTimestampMark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The migration version timestamp */
                timestamp: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the database
                     * @default main
                     * @enum {string}
                     */
                    database?: "main" | "ci" | "embedding" | "main_clusterwide" | "geo";
                };
            };
        };
        responses: {
            /** @description 201 Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 401 Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You can mark only pending migrations */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteApiV4ApplicationsId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the application (not the application_id) */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete an application */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4Applications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get applications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Application"][];
                };
            };
        };
    };
    postApiV4Applications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the application. */
                    name: string;
                    /** @description Redirect URI of the application. */
                    redirect_uri: string;
                    /** @description Scopes of the application. You can specify multiple scopes by separating\
                     *                                      each scope using a space */
                    scopes: string;
                    /**
                     * @description The application is used where the client secret can be kept confidential. Native mobile apps \
                     *                             and Single Page Apps are considered non-confidential. Defaults to true if not supplied
                     * @default true
                     */
                    confidential?: boolean;
                };
            };
        };
        responses: {
            /** @description Create a new application */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_ApplicationWithSecret"];
                };
            };
        };
    };
    getApiV4Avatar: {
        parameters: {
            query: {
                /** @description Public email address of the user */
                email: string;
                /** @description Single pixel dimension for Gravatar images */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return avatar url for a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Avatar"];
                };
            };
        };
    };
    getApiV4BroadcastMessagesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Broadcast message ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get a specific broadcast message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BroadcastMessage"];
                };
            };
        };
    };
    putApiV4BroadcastMessagesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Broadcast message ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Message to display */
                    message?: string;
                    /**
                     * Format: date-time
                     * @description Starting time
                     */
                    starts_at?: string;
                    /**
                     * Format: date-time
                     * @description Ending time
                     */
                    ends_at?: string;
                    /** @description Background color */
                    color?: string;
                    /** @description Foreground color */
                    font?: string;
                    /** @description Target user roles */
                    target_access_levels?: (10 | 20 | 30 | 40 | 50)[];
                    /** @description Target path */
                    target_path?: string;
                    /**
                     * @description Broadcast Type
                     * @enum {string}
                     */
                    broadcast_type?: "banner" | "notification";
                    /** @description Is dismissable */
                    dismissable?: boolean;
                };
            };
        };
        responses: {
            /** @description Update a broadcast message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BroadcastMessage"];
                };
            };
        };
    };
    deleteApiV4BroadcastMessagesId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Broadcast message ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a broadcast message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BroadcastMessage"];
                };
            };
        };
    };
    getApiV4BroadcastMessages: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all broadcast messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BroadcastMessage"];
                };
            };
        };
    };
    postApiV4BroadcastMessages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Message to display */
                    message: string;
                    /**
                     * Format: date-time
                     * @description Starting time
                     */
                    starts_at?: string;
                    /**
                     * Format: date-time
                     * @description Ending time
                     */
                    ends_at?: string;
                    /** @description Background color */
                    color?: string;
                    /** @description Foreground color */
                    font?: string;
                    /** @description Target user roles */
                    target_access_levels?: (10 | 20 | 30 | 40 | 50)[];
                    /** @description Target path */
                    target_path?: string;
                    /**
                     * @description Broadcast type. Defaults to banner
                     * @enum {string}
                     */
                    broadcast_type?: "banner" | "notification";
                    /** @description Is dismissable */
                    dismissable?: boolean;
                };
            };
        };
        responses: {
            /** @description Create a broadcast message */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BroadcastMessage"];
                };
            };
        };
    };
    getApiV4BulkImportsImportIdEntitiesEntityId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of user's GitLab Migration */
                import_id: number;
                /** @description The ID of GitLab Migration entity */
                entity_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get GitLab Migration entity details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BulkImports"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4BulkImportsImportIdEntities: {
        parameters: {
            query?: {
                /** @description Return import entities with specified status */
                status?: "created" | "started" | "finished" | "timeout" | "failed";
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description The ID of user's GitLab Migration */
                import_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List GitLab Migration entities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BulkImports"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4BulkImportsImportId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of user's GitLab Migration */
                import_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get GitLab Migration details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BulkImport"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4BulkImportsEntities: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Return GitLab Migrations sorted in created by `asc` or `desc` order. */
                sort?: "asc" | "desc";
                /** @description Return all GitLab Migrations' entities with specified status */
                status?: "created" | "started" | "finished" | "timeout" | "failed";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all GitLab Migrations' entities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BulkImports"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4BulkImports: {
        parameters: {
            query?: {
                /** @description Current page number */
                page?: number;
                /** @description Number of items per page */
                per_page?: number;
                /** @description Return GitLab Migrations sorted in created by `asc` or `desc` order. */
                sort?: "asc" | "desc";
                /** @description Return GitLab Migrations with specified status */
                status?: "created" | "started" | "finished" | "timeout" | "failed";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all GitLab Migrations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BulkImport"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postApiV4BulkImports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Source GitLab instance URL */
                    "configuration[url]": string;
                    /** @description Access token to the source GitLab instance */
                    "configuration[access_token]": string;
                    /** @description Source entity type */
                    "entities[source_type]": ("group_entity" | "project_entity")[];
                    /** @description Relative path of the source entity to import */
                    "entities[source_full_path]": string[];
                    /** @description Destination namespace for the entity */
                    "entities[destination_namespace]": string[];
                    /** @description Destination slug for the entity */
                    "entities[destination_slug]"?: string[];
                    /** @description Deprecated: Use :destination_slug instead. Destination slug for the entity */
                    "entities[destination_name]"?: string[];
                    /** @description Indicates group migration should include nested projects */
                    "entities[migrate_projects]"?: boolean[];
                };
            };
        };
        responses: {
            /** @description Start a new GitLab Migration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_BulkImport"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4ApplicationAppearance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get the current appearance */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Appearance"];
                };
            };
        };
    };
    putApiV4ApplicationAppearance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description Instance title on the sign in / sign up page */
                    title?: string;
                    /** @description Markdown text shown on the sign in / sign up page */
                    description?: string;
                    /** @description Name of the Progressive Web App */
                    pwa_name?: string;
                    /** @description Optional, short name for Progressive Web App */
                    pwa_short_name?: string;
                    /** @description An explanation of what the Progressive Web App does */
                    pwa_description?: string;
                    /**
                     * Format: binary
                     * @description Instance image used on the sign in / sign up page
                     */
                    logo?: string;
                    /**
                     * Format: binary
                     * @description Icon used for Progressive Web App
                     */
                    pwa_icon?: string;
                    /**
                     * Format: binary
                     * @description Instance image used for the main navigation bar
                     */
                    header_logo?: string;
                    /**
                     * Format: binary
                     * @description Instance favicon in .ico/.png format
                     */
                    favicon?: string;
                    /** @description Markdown text shown on the new project page */
                    new_project_guidelines?: string;
                    /** @description Markdown text shown on the profile page below Public Avatar */
                    profile_image_guidelines?: string;
                    /** @description Message within the system header bar */
                    header_message?: string;
                    /** @description Message within the system footer bar */
                    footer_message?: string;
                    /** @description Background color for the system header / footer bar */
                    message_background_color?: string;
                    /** @description Font color for the system header / footer bar */
                    message_font_color?: string;
                    /** @description Add header and footer to all outgoing emails if enabled */
                    email_header_and_footer_enabled?: boolean;
                };
            };
        };
        responses: {
            /** @description Modify appearance */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Appearance"];
                };
            };
        };
    };
    getApiV4ApplicationPlanLimits: {
        parameters: {
            query?: {
                /** @description Name of the plan to get the limits from. Default: default. */
                plan_name?: "default" | "free" | "bronze" | "silver" | "premium" | "gold" | "ultimate" | "ultimate_trial" | "premium_trial" | "opensource";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get current plan limits */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_PlanLimit"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putApiV4ApplicationPlanLimits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the plan to update
                     * @enum {string}
                     */
                    plan_name: "default" | "free" | "bronze" | "silver" | "premium" | "gold" | "ultimate" | "ultimate_trial" | "premium_trial" | "opensource";
                    /**
                     * Format: int32
                     * @description Maximum number of jobs in a single pipeline
                     */
                    ci_pipeline_size?: number;
                    /**
                     * Format: int32
                     * @description Total number of jobs in currently active pipelines
                     */
                    ci_active_jobs?: number;
                    /**
                     * Format: int32
                     * @description Maximum number of pipeline subscriptions to and from a project
                     */
                    ci_project_subscriptions?: number;
                    /**
                     * Format: int32
                     * @description Maximum number of pipeline schedules
                     */
                    ci_pipeline_schedules?: number;
                    /**
                     * Format: int32
                     * @description Maximum number of needs dependencies that a job can have
                     */
                    ci_needs_size_limit?: number;
                    /**
                     * Format: int32
                     * @description Maximum number of runners registered per group
                     */
                    ci_registered_group_runners?: number;
                    /**
                     * Format: int32
                     * @description Maximum number of runners registered per project
                     */
                    ci_registered_project_runners?: number;
                    /**
                     * Format: int32
                     * @description Maximum Conan package file size in bytes
                     */
                    conan_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum storage size for the root namespace enforcement in MiB
                     */
                    enforcement_limit?: number;
                    /**
                     * Format: int32
                     * @description Maximum generic package file size in bytes
                     */
                    generic_packages_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum Helm chart file size in bytes
                     */
                    helm_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum Maven package file size in bytes
                     */
                    maven_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum storage size for the root namespace notifications in MiB
                     */
                    notification_limit?: number;
                    /**
                     * Format: int32
                     * @description Maximum NPM package file size in bytes
                     */
                    npm_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum NuGet package file size in bytes
                     */
                    nuget_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum PyPI package file size in bytes
                     */
                    pypi_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum Terraform Module package file size in bytes
                     */
                    terraform_module_max_file_size?: number;
                    /**
                     * Format: int32
                     * @description Maximum storage size for the root namespace in MiB
                     */
                    storage_size_limit?: number;
                    /**
                     * Format: int32
                     * @description Maximum number of downstream pipelines in a pipeline's hierarchy tree
                     */
                    pipeline_hierarchy_size?: number;
                };
            };
        };
        responses: {
            /** @description Change plan limits */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_PlanLimit"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4Metadata: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve metadata information for this GitLab instance */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Metadata"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApiV4Version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieves version information for the GitLab instance */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Metadata"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listProjectJobs: {
        parameters: {
            query?: {
                /** @description Return all jobs with the specified statuses */
                scope?: string[];
            };
            header?: never;
            path: {
                /** @description The ID of the project */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An array of jobs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Job"][];
                };
            };
        };
    };
    getSingleJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project */
                id: number;
                /** @description The ID of the job */
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single job object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["API_Entities_Job"];
                };
            };
        };
    };
    triggerManualJob: {
        parameters: {
            query?: {
                /** @description An array containing the custom variables available to the job */
                job_variables_attributes?: string[];
            };
            header?: never;
            path: {
                /** @description The ID of the project */
                id: number;
                /** @description The ID of the manual job to run */
                job_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Job started successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}



export interface GitLabProject {
    id: number;
    description: string | null;
    name: string;
    name_with_namespace: string;
    path: string;
    path_with_namespace: string;
    created_at: string;
    default_branch: string;
    tag_list: string[];
    topics: string[];
    ssh_url_to_repo: string;
    http_url_to_repo: string;
    web_url: string;
    readme_url: string;
    forks_count: number;
    avatar_url: string | null;
    star_count: number;
    last_activity_at: string;
    namespace: Namespace;
    repository_storage: string;
    _links: Links;
    packages_enabled: boolean;
    empty_repo: boolean;
    archived: boolean;
    visibility: string;
    resolve_outdated_diff_discussions: boolean;
    container_expiration_policy: ContainerExpirationPolicy;
    repository_object_format: string;
    issues_enabled: boolean;
    merge_requests_enabled: boolean;
    wiki_enabled: boolean;
    jobs_enabled: boolean;
    snippets_enabled: boolean;
    container_registry_enabled: boolean;
    service_desk_enabled: boolean;
    service_desk_address: string | null;
    can_create_merge_request_in: boolean;
    issues_access_level: string;
    repository_access_level: string;
    merge_requests_access_level: string;
    forking_access_level: string;
    wiki_access_level: string;
    builds_access_level: string;
    snippets_access_level: string;
    pages_access_level: string;
    analytics_access_level: string;
    container_registry_access_level: string;
    security_and_compliance_access_level: string;
    releases_access_level: string;
    environments_access_level: string;
    feature_flags_access_level: string;
    infrastructure_access_level: string;
    monitor_access_level: string;
    model_experiments_access_level: string;
    model_registry_access_level: string;
    emails_disabled: boolean;
    emails_enabled: boolean;
    shared_runners_enabled: boolean;
    lfs_enabled: boolean;
    creator_id: number;
    import_url: string | null;
    import_type: string | null;
    import_status: string;
    open_issues_count: number;
    description_html: string;
    updated_at: string;
    ci_default_git_depth: number;
    ci_delete_pipelines_in_seconds: number | null;
    ci_forward_deployment_enabled: boolean;
    ci_forward_deployment_rollback_allowed: boolean;
    ci_job_token_scope_enabled: boolean;
    ci_separated_caches: boolean;
    ci_allow_fork_pipelines_to_run_in_parent_project: boolean;
    ci_id_token_sub_claim_components: string[];
    build_git_strategy: string;
    keep_latest_artifact: boolean;
    restrict_user_defined_variables: boolean;
    ci_pipeline_variables_minimum_override_role: string;
    runners_token: string;
    runner_token_expiration_interval: number | null;
    group_runners_enabled: boolean;
    auto_cancel_pending_pipelines: string;
    build_timeout: number;
    auto_devops_enabled: boolean;
    auto_devops_deploy_strategy: string;
    ci_push_repository_for_job_token_allowed: boolean;
    ci_config_path: string | null;
    public_jobs: boolean;
    shared_with_groups: any[];
    only_allow_merge_if_pipeline_succeeds: boolean;
    allow_merge_on_skipped_pipeline: any | null;
    request_access_enabled: boolean;
    only_allow_merge_if_all_discussions_are_resolved: boolean;
    remove_source_branch_after_merge: boolean;
    printing_merge_request_link_enabled: boolean;
    merge_method: string;
    squash_option: string;
    enforce_auth_checks_on_uploads: boolean;
    suggestion_commit_message: string | null;
    merge_commit_template: string | null;
    squash_commit_template: string | null;
    issue_branch_template: string | null;
    warn_about_potentially_unwanted_characters: boolean;
    autoclose_referenced_issues: boolean;
    permissions: Permissions;
    owner?: Owner;
}

interface Namespace {
    id: number;
    name: string;
    path: string;
    kind: string;
    full_path: string;
    parent_id: number | null;
    avatar_url: string | null;
    web_url: string;
}

interface Links {
    self: string;
    issues: string;
    merge_requests: string;
    repo_branches: string;
    labels: string;
    events: string;
    members: string;
    cluster_agents: string;
}

interface ContainerExpirationPolicy {
    cadence: string;
    enabled: boolean;
    keep_n: number;
    older_than: string;
    name_regex: string;
    name_regex_keep: string | null;
    next_run_at: string;
}

interface Permissions {
    project_access: ProjectAccess | null;
    group_access: GroupAccess | null;
}

interface ProjectAccess {
    access_level: number;
    notification_level: number;
}

interface GroupAccess {
    access_level: number;
    notification_level: number;
}

interface Owner {
    id: number;
    username: string;
    name: string;
    state: string;
    locked: boolean;
    avatar_url: string;
    web_url: string;
}

type GitLabProjectListResponse = GitLabProject[];